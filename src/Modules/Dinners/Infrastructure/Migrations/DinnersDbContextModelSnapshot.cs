// <auto-generated />
using System;
using Dinners.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dinners.Infrastructure.Migrations
{
    [DbContext(typeof(DinnersDbContext))]
    partial class DinnersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dinners.Domain.Menus.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RestaurantId");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Menus", "dinners");
                });

            modelBuilder.Entity("Dinners.Domain.Menus.MenuReviews.MenuReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuReviewId");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<decimal>("Rate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal")
                        .HasColumnName("Rate");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReviewedAt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Reviews", "dinners");
                });

            modelBuilder.Entity("Dinners.Domain.Reservations.Refunds.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RefundId");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("RefundedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("RefundedAt");

                    b.HasKey("Id");

                    b.ToTable("Refunds", "dinners");
                });

            modelBuilder.Entity("Dinners.Domain.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReservationId");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CancelledAt");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PaidAt");

                    b.Property<Guid?>("RefundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RefundId");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("RequestedAt");

                    b.Property<Guid?>("ReservationPaymentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReservationPaymentId");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RestaurantId");

                    b.HasKey("Id");

                    b.ToTable("Reservations", "dinners");
                });

            modelBuilder.Entity("Dinners.Domain.Reservations.ReservationsPayments.ReservationPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReservationPaymentId");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PaidAt");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PayerId");

                    b.HasKey("Id");

                    b.ToTable("ReservationPayments", "dinners");
                });

            modelBuilder.Entity("Dinners.Domain.Restaurants.RestaurantRatings.RestaurantRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RatingId");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("RatedAt");

                    b.Property<int>("Stars")
                        .HasColumnType("int")
                        .HasColumnName("Stars");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Ratings", "dinners");
                });

            modelBuilder.Entity("Dinners.Infrastructure.Domain.Menus.MenuReviews.MenusReviews", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuId");

                    b.Property<Guid>("MenuReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuReviewId");

                    b.HasKey("MenuId", "MenuReviewId");

                    b.ToTable("MenusReviews", "dinners");
                });

            modelBuilder.Entity("Dinners.Infrastructure.Domain.ReservationsMenus.ReservationMenus", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReservationId");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuId");

                    b.HasKey("ReservationId", "MenuId");

                    b.ToTable("ReservationMenus", "dinners");
                });

            modelBuilder.Entity("Dinners.Infrastructure.Domain.Restaurants.RestaurantsRatings.RestaurantRatings", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RestaurantId");

                    b.Property<Guid>("RestaurantRatingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RatingId");

                    b.HasKey("RestaurantId", "RestaurantRatingId");

                    b.ToTable("RestaurantRatings", "dinners");
                });

            modelBuilder.Entity("Dinners.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Error");

                    b.Property<DateTime>("OcurredOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("OcurredOn");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ProcessedOn");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("DinnersOutboxMessages", "dinners");
                });

            modelBuilder.Entity("Domain.Restaurants.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RestaurantId");

                    b.Property<int>("NumberOfTables")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfTables");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PostedAt");

                    b.HasKey("Id");

                    b.ToTable("Restaurants", "dinners");
                });

            modelBuilder.Entity("Dinners.Domain.Menus.Menu", b =>
                {
                    b.OwnsOne("Dinners.Domain.Menus.Details.MenuDetails", "MenuDetails", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.Property<decimal>("Discount")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("Discount");

                            b1.Property<string>("DiscountTerms")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DiscountTerms");

                            b1.Property<bool>("HasAlcohol")
                                .HasColumnType("bit")
                                .HasColumnName("HasAlcohol");

                            b1.Property<bool>("IsVegetarian")
                                .HasColumnType("bit")
                                .HasColumnName("IsVegetarian");

                            b1.Property<string>("PrimaryChefName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PrimaryChefName");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Title");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menus", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.OwnsOne("Dinners.Domain.Common.Price", "Price", b2 =>
                                {
                                    b2.Property<Guid>("MenuDetailsMenuId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal")
                                        .HasColumnName("PriceAmount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PriceCurrency");

                                    b2.HasKey("MenuDetailsMenuId");

                                    b2.ToTable("Menus", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("MenuDetailsMenuId");
                                });

                            b1.OwnsOne("Dinners.Domain.Menus.Details.MenuType", "MenuType", b2 =>
                                {
                                    b2.Property<Guid>("MenuDetailsMenuId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("MenuType");

                                    b2.HasKey("MenuDetailsMenuId");

                                    b2.ToTable("Menus", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("MenuDetailsMenuId");
                                });

                            b1.Navigation("MenuType")
                                .IsRequired();

                            b1.Navigation("Price")
                                .IsRequired();
                        });

                    b.OwnsMany("Dinners.Domain.Menus.Details.MenuImageUrl", "MenuImagesUrl", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuImageUrlId");

                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MenuImageUrl");

                            b1.HasKey("Id");

                            b1.HasIndex("MenuId");

                            b1.ToTable("MenuImagesUrl", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.OwnsMany("Dinners.Domain.Menus.Details.Tag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TagId");

                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Tag");

                            b1.HasKey("Id");

                            b1.HasIndex("MenuId");

                            b1.ToTable("Tags", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.OwnsOne("Dinners.Domain.Menus.Dishes.DishSpecification", "DishSpecification", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Appetizers")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Appetizers");

                            b1.Property<string>("Beverages")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Beverages");

                            b1.Property<string>("Coffee")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Coffee");

                            b1.Property<string>("Condiments")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Condiments");

                            b1.Property<string>("Desserts")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Desserts");

                            b1.Property<string>("MainCourse")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MainCourse");

                            b1.Property<string>("Sauces")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Sauces");

                            b1.Property<string>("SideDishes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SideDishes");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menus", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.OwnsMany("Dinners.Domain.Menus.Dishes.Ingredient", "Ingredients", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("IngredientId");

                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Ingredient");

                            b1.HasKey("Id");

                            b1.HasIndex("MenuId");

                            b1.ToTable("Ingredients", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.OwnsMany("Dinners.Domain.Menus.MenuConsumer", "MenuConsumers", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuId");

                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClientId");

                            b1.HasKey("MenuId");

                            b1.ToTable("MenuConsumers", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.OwnsMany("Dinners.Domain.Menus.Schedules.MenuSchedule", "MenuSchedules", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuScheduleId");

                            b1.Property<int>("Day")
                                .HasColumnType("int")
                                .HasColumnName("DayOfWeek");

                            b1.Property<TimeSpan>("EndTimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("EndTimeSpan");

                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MenuId");

                            b1.Property<TimeSpan>("StartTimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("StartTimeSpan");

                            b1.HasKey("Id");

                            b1.HasIndex("MenuId");

                            b1.ToTable("MenuSchedule", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.Navigation("DishSpecification")
                        .IsRequired();

                    b.Navigation("Ingredients");

                    b.Navigation("MenuConsumers");

                    b.Navigation("MenuDetails")
                        .IsRequired();

                    b.Navigation("MenuImagesUrl");

                    b.Navigation("MenuSchedules");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Dinners.Domain.Reservations.Refunds.Refund", b =>
                {
                    b.OwnsOne("Dinners.Domain.Common.Price", "RefundedMoney", b1 =>
                        {
                            b1.Property<Guid>("RefundId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("MoneyRefunded");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MoneyCurrency");

                            b1.HasKey("RefundId");

                            b1.ToTable("Refunds", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RefundId");
                        });

                    b.Navigation("RefundedMoney")
                        .IsRequired();
                });

            modelBuilder.Entity("Dinners.Domain.Reservations.Reservation", b =>
                {
                    b.OwnsOne("Dinners.Domain.Reservations.ReservationAttendees", "ReservationAttendees", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClientId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.Property<int>("NumberOfAttendees")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfAttendees");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.OwnsOne("Dinners.Domain.Reservations.ReservationInformation", "ReservationInformation", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("ReservationDateTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("ReservationDateTime");

                            b1.Property<int>("ReservedTable")
                                .HasColumnType("int")
                                .HasColumnName("ReservedTable");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");

                            b1.OwnsOne("Dinners.Domain.Common.Price", "ReservationPrice", b2 =>
                                {
                                    b2.Property<Guid>("ReservationInformationReservationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal")
                                        .HasColumnName("MoneyAmount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("MoneyCurrency");

                                    b2.HasKey("ReservationInformationReservationId");

                                    b2.ToTable("Reservations", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("ReservationInformationReservationId");
                                });

                            b1.OwnsOne("Dinners.Domain.Reservations.TimeRange", "TimeOfReservation", b2 =>
                                {
                                    b2.Property<Guid>("ReservationInformationReservationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time")
                                        .HasColumnName("ReservationEndTime");

                                    b2.Property<TimeSpan>("Start")
                                        .HasColumnType("time")
                                        .HasColumnName("ReservationStartTime");

                                    b2.HasKey("ReservationInformationReservationId");

                                    b2.ToTable("Reservations", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("ReservationInformationReservationId");
                                });

                            b1.Navigation("ReservationPrice")
                                .IsRequired();

                            b1.Navigation("TimeOfReservation")
                                .IsRequired();
                        });

                    b.OwnsOne("Dinners.Domain.Reservations.ReservationStatus", "ReservationStatus", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ReservationStatus");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("ReservationAttendees")
                        .IsRequired();

                    b.Navigation("ReservationInformation")
                        .IsRequired();

                    b.Navigation("ReservationStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Dinners.Domain.Reservations.ReservationsPayments.ReservationPayment", b =>
                {
                    b.OwnsOne("Dinners.Domain.Common.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReservationPaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("MoneyPaid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MoneyCurrency");

                            b1.HasKey("ReservationPaymentId");

                            b1.ToTable("ReservationPayments", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("ReservationPaymentId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Dinners.Infrastructure.Domain.Menus.MenuReviews.MenusReviews", b =>
                {
                    b.HasOne("Dinners.Domain.Menus.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dinners.Infrastructure.Domain.ReservationsMenus.ReservationMenus", b =>
                {
                    b.HasOne("Dinners.Domain.Reservations.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dinners.Infrastructure.Domain.Restaurants.RestaurantsRatings.RestaurantRatings", b =>
                {
                    b.HasOne("Domain.Restaurants.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Restaurants.Restaurant", b =>
                {
                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantInformations.Chef", "Chefs", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ChefId");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Chef");

                            b1.HasKey("Id", "RestaurantId");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("Chefs", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsOne("Dinners.Domain.Restaurants.RestaurantInformations.RestaurantContact", "RestaurantContact", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Facebook")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Facebook");

                            b1.Property<string>("Instagram")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Instagram");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("TikTok")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TikTok");

                            b1.Property<string>("Twitter")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Twitter");

                            b1.Property<string>("Website")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Website");

                            b1.Property<string>("Whatsapp")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Whatsapp");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantInformations.RestaurantImageUrl", "RestaurantImagesUrl", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantImageUrlId");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RestaurantImageUrl");

                            b1.HasKey("Id");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("RestaurantImagesUrl", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsOne("Dinners.Domain.Restaurants.RestaurantInformations.RestaurantInformation", "RestaurantInformation", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Title");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Type");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsOne("Dinners.Domain.Restaurants.RestaurantInformations.RestaurantLocalization", "RestaurantLocalization", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Addresss")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("LocalizationDetails")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LocalizationDetails");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Region");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantInformations.Speciality", "Specialities", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("SpecialityId");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Speciality");

                            b1.HasKey("Id");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("Specialties", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantSchedules.RestaurantSchedule", "RestaurantSchedules", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantScheduleId");

                            b1.Property<DateTime?>("ReopeningTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("ReopeningTime");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.HasKey("Id");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("RestaurantSchedules", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.OwnsOne("Dinners.Domain.Restaurants.RestaurantSchedules.DayOfOperation", "Day", b2 =>
                                {
                                    b2.Property<Guid>("RestaurantScheduleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("DayOfWeek")
                                        .HasColumnType("int")
                                        .HasColumnName("DayOfWeek");

                                    b2.HasKey("RestaurantScheduleId");

                                    b2.ToTable("RestaurantSchedules", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("RestaurantScheduleId");
                                });

                            b1.OwnsOne("Dinners.Domain.Common.TimeRange", "HoursOfOperation", b2 =>
                                {
                                    b2.Property<Guid>("RestaurantScheduleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime>("End")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("CloseTime");

                                    b2.Property<DateTime>("Start")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("OpenTime");

                                    b2.HasKey("RestaurantScheduleId");

                                    b2.ToTable("RestaurantSchedules", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("RestaurantScheduleId");
                                });

                            b1.Navigation("Day")
                                .IsRequired();

                            b1.Navigation("HoursOfOperation")
                                .IsRequired();
                        });

                    b.OwnsOne("Dinners.Domain.Restaurants.RestaurantSchedules.RestaurantScheduleStatus", "RestaurantScheduleStatus", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RestaurantScheduleStatus");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsOne("Dinners.Domain.Restaurants.RestaurantTables.AvailableTablesStatus", "AvailableTablesStatus", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AvailableTableStatus");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantTables.RestaurantTable", "RestaurantTables", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantTableId");

                            b1.Property<bool>("IsOccupied")
                                .HasColumnType("bit")
                                .HasColumnName("IsOccupied");

                            b1.Property<bool>("IsPremium")
                                .HasColumnType("bit")
                                .HasColumnName("IsPremium");

                            b1.Property<int>("Number")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfTable");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.Property<int>("Seats")
                                .HasColumnType("int")
                                .HasColumnName("Seats");

                            b1.HasKey("Id");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("RestaurantTables", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.OwnsMany("Dinners.Domain.Restaurants.RestaurantTables.ReservedHour", "ReservedHours", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("ReservedHourId");

                                    b2.Property<DateTime>("ReservationDateTime")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("ReservationDateTime");

                                    b2.Property<Guid>("RestaurantId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("RestaurantId");

                                    b2.Property<Guid>("RestaurantTableId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("RestaurantTableId");

                                    b2.HasKey("Id");

                                    b2.HasIndex("RestaurantTableId");

                                    b2.ToTable("ReservedHours", "dinners");

                                    b2.WithOwner()
                                        .HasForeignKey("RestaurantTableId");

                                    b2.OwnsOne("Dinners.Domain.Common.TimeRange", "ReservationTimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("ReservedHourId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<DateTime>("End")
                                                .HasColumnType("datetime2")
                                                .HasColumnName("EndReservationTimeRange");

                                            b3.Property<DateTime>("Start")
                                                .HasColumnType("datetime2")
                                                .HasColumnName("StartReservationTimeRange");

                                            b3.HasKey("ReservedHourId");

                                            b3.ToTable("ReservedHours", "dinners");

                                            b3.WithOwner()
                                                .HasForeignKey("ReservedHourId");
                                        });

                                    b2.Navigation("ReservationTimeRange")
                                        .IsRequired();
                                });

                            b1.Navigation("ReservedHours");
                        });

                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantUsers.RestaurantAdministration", "RestaurantAdministrations", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantAdministrationId");

                            b1.Property<Guid>("AdministratorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AdministratorId");

                            b1.Property<string>("AdministratorTitle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AdministratorTitle");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.HasKey("Id");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("RestaurantAdministrations", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Dinners.Domain.Restaurants.RestaurantUsers.RestaurantClient", "RestaurantClients", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantClientId");

                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClientId");

                            b1.Property<int>("NumberOfVisits")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfVisits");

                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RestaurantId");

                            b1.HasKey("Id");

                            b1.HasIndex("RestaurantId");

                            b1.ToTable("RestaurantClients", "dinners");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.Navigation("AvailableTablesStatus")
                        .IsRequired();

                    b.Navigation("Chefs");

                    b.Navigation("RestaurantAdministrations");

                    b.Navigation("RestaurantClients");

                    b.Navigation("RestaurantContact")
                        .IsRequired();

                    b.Navigation("RestaurantImagesUrl");

                    b.Navigation("RestaurantInformation")
                        .IsRequired();

                    b.Navigation("RestaurantLocalization")
                        .IsRequired();

                    b.Navigation("RestaurantScheduleStatus")
                        .IsRequired();

                    b.Navigation("RestaurantSchedules");

                    b.Navigation("RestaurantTables");

                    b.Navigation("Specialities");
                });
#pragma warning restore 612, 618
        }
    }
}
